#!/bin/bash

# Directories in theme.
THEME_DIR=$(dirname "$0")/../themes/BC
BENTO_THEME_DIR=${THEME_DIR}/static/bcbento
ASSETS_TARGET_DIR=${BENTO_THEME_DIR}/assets
MANIFEST_TARGET_FILE=${THEME_DIR}/data/search/manifest.json

#Options
BUILD=false
BRANCH="master"

# Arguments
path_to_client=

function main() {
  validate_theme_files
  get_options "$@"

  if [ "$BUILD" = true ]; then
    build_client
  fi
  clean_old_files
  copy_build_files
}

# Something went wrong.
function error_exit() {
  RED='\033[0;31m'
  NC='\033[0m' # No Color
  printf "${RED}ERROR: $1${NC}\n" 1>&2
  exit 1
}

# Show application usage.
function show_usage() {
  NC='\033[0m' # No Color
  YELLOW='\033[1;33m'
  echo -e "${YELLOW}Usage${NC}:
  deploy-bento [options] path_to_client

${YELLOW}Options${NC}:
  -h                        Display this help message.
  -b branch-name            Perform a fresh build from git branch
"
}

# Make sure all the paths in the Hugo theme exist
function validate_theme_files() {
  # Die if theme directories and files aren't where they are supposed to be.
  if [ ! -d "$BENTO_THEME_DIR" ]; then
    error_exit "$BENTO_THEME_DIR: Bento directory not found in theme: ${BENTO_THEME_DIR}"
  fi
}

function get_options() {
  local OPTIND
  while getopts ":hb:" opt; do
    case ${opt} in
    h)
      show_usage
      exit 0
      ;;
    b)
      BUILD=true
      BRANCH=$OPTARG
      ;;
    \?)
      error_exit "Invalid Option: -$OPTARG" 1>&2
      ;;
    esac
  done
  shift $((OPTIND - 1))

  path_to_client=$1
  if [ ! -d "$path_to_client" ]; then
    error_exit "${path_to_client}: No such directory"
  fi
}

# Build a new deployment of the client.
function build_client() {
  pushd "$path_to_client" || error_exit "$path_to_client: Could not cd to client"
  current_branch=$(git rev-parse --abbrev-ref HEAD)
  git checkout "$BRANCH" || error_exit "Couldn't checkout client branch $BRANCH"
  yarn build || error_exit "Couldn't build client"
  git checkout "$current_branch"
  popd || return
}

# Remove any old files.
function clean_old_files() {
  echo "Remove old assets dir..."
  rm -r "${ASSETS_TARGET_DIR}" || error_exit "Couldn't delete assets directory: ${ASSETS_TARGET_DIR}"

  echo "Remove old manifest.json"
  rm -r "${MANIFEST_TARGET_FILE}" || error_exit "Couldn't delete manifest file: ${MANIFEST_TARGET_FILE}"
}

# Copy in the fresh files.
function copy_build_files() {
  echo "Copy over new js directory..."
  cp -r "${path_to_client}"/dist/assets "${ASSETS_TARGET_DIR}" || error_exit "Couldn't copy assets dir"

  cp -r "${path_to_client}"/dist/.vite/manifest.json "${MANIFEST_TARGET_FILE}" || error_exit "Couldn't copy manifest"
}


main "$@"
